class RLEIterator:

    def __init__(self, A):
        """
        :type A: List[int]
        """
        self.repeat_values = collections.deque([])
        self.repeated_values = collections.deque([])
        for i in range(len(A)):
            if i%2 == 0 and A[i] != 0:
                self.repeat_values.append(A[i])
                self.repeated_values.append(A[i+1])
        assert(len(self.repeat_values) == len(self.repeated_values))
    def next(self, n):
        self.n = n
        if not self.repeat_values:
            return -1
        while self.repeat_values and self.repeated_values:
            repeat, value = self.repeat_values.popleft(),self.repeated_values.popleft()

            if n < repeat:
                repeat -= n
                self.repeat_values.appendleft(repeat)
                self.repeated_values.appendleft(value)
                return value
            elif n == repeat:
                return value
            else:
                n -= repeat

        return -1
